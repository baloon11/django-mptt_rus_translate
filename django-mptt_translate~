      Перевод документации django-mptt 0.6.1
  
http://django-mptt.github.io/django-mptt/overview.html

MPTT является методом хранения иерархических данных в базе данных.
Его цель состоит в том, чтобы сделать поисковые операции очень эффективным.
-----------------
ссылка "Хранение иерархических данных в БД" --http://www.sitepoint.com/hierarchical-data-database/
-----------------

обзор функций
     Простая регистрация моделей - поля, необходимые для древовидной структуры будут добавлены автоматически.
    Структура дерева автоматически обновляется при создании или удалении экземпляров модели, или измении родителя данных экземпляра.
     Каждый уровень дерева автоматически сортируются по полю (или полям) по вашему выбору.
  
     Новые методы модели добавляются к каждой зарегистрированной модели:
         изменение положения в дереве
         получение предков, братьев и сестер, потомков
         подсчет потомков
         другие операции  связанные с иерархическим деревом.
----------------------

Менеджер TreeManager добавляется для всех зарегистрированных моделей. 
    этот менеджер предоставляет методы для:
 --   перемещения узлов внутри дерева или вынос узла в другое дерево,
 --   возможность вставить узел в любое место дерева,
 --   перестроить поля MPTT для дерева (полезно, когда вы делаете сыпучих 
      обновления за пределами   Django)
----------------------
 также есть такие опции:
    Поля формы для моделей деревьев.
    Служебные функции для моделей деревьев.
    Шаблонные теги и фильтры для отображения деревьев.
     Переводы:
         датский
         французский
         немецкий
         польский
------------------------------------------------------------------
Tutorial -Учебник
http://django-mptt.github.io/django-mptt/tutorial.html

Задача
Вы создали проект Django, и вы должны управлять некоторыми иерархические данные. Например, вы получили кучу иерархических страниц в CMS, а иногда и страниц дети других страниц

Теперь предположим, что вы хотите показать "хлебные крошки" на вашем сайте,  например такие:
Home > Products > Food > Meat > Spam > Spammy McDelicious

чтобы получить заголовки страниц вы должны сделать что-тона подобии такого:
titles = []
while page:
    titles.append(page.title)
    page = page.parent

Это один запрос к базе данных для каждой страницы в навигационной цепочке, и запросы к базе данных медленно. Давайте сделаем это лучший путь.


Решение 
mptt -могутпоказаться сложными на первый взгляд, но это лучшее решение , чтобы решить проблему

MPTT делает большинство орераций с деревьями гораздо дешевле с точки зрения запросов. На самом деле все эти операции(представленные ниже) не более одного запроса,а иногда требуется вообще ноль запросов:

        -- получить потомство узла
        --  получить предки узла
        -- получить все узлы на заданном уровне
        -- получить листовые узлы

А эта операция происходит вообще без дапроса:

        --  считать потомков данного узла
----------------------------------------------------
Давайте теперь разбираться

1. добавляем в INSTALLED_APPS: 
INSTALLED_APPS = (
    'django.contrib.auth',
    # ...
    'mptt',
)

2. Настроим нужную модель
Начните с базовой подкласса MPTTModel, что-то вроде этого:

from django.db import models
from mptt.models import MPTTModel, TreeForeignKey

class Genre(MPTTModel):
    name = models.CharField(max_length=50, unique=True)
    parent = TreeForeignKey('self', null=True, blank=True, related_name='children')

    class MPTTMeta:
        order_insertion_by = ['name']

Вы должны определить поле parent  как TreeForeignKey  и оно должно ссылаться на самого себя 'self'.

TreeForeignKey просто обычное ForeignKey,
которое отображает поля формы по-разному в админке и некоторых других местах.



Потому как мы наследовалить от MPTTModel, то
наша модель будет также иметь ряд других полей :
    level,  
    lft, 
    rght, 
and tree_id.
 Эти поля управляются с помощью алгоритма MPTT.
Большую часть времени вам не нужно будет использовать эти поля непосредственно.

Этот класс MPTTMeta добавляет некоторые хитрости, 
чтобы Django-mptt - в нашем случае, просто order_insertion_by. 
Это указывает на естественный порядок данных в дереве.

3.Now create your table in the database:

   python manage.py syncdb

----------------------------------------
теперь можно  через шелл можно создать несколько записей в таблицу

python manage.py shell

Now create some data to test:

from myapp.models import Genre
rock = Genre.objects.create(name="Rock")
blues = Genre.objects.create(name="Blues")
Genre.objects.create(name="Hard Rock", parent=rock)
Genre.objects.create(name="Pop Rock", parent=rock)


затем вот такое представление и url


This one’s pretty simple for now. Add this lightweight view to your views.py:

def show_genres(request):
    return render_to_response("genres.html",
                          {'nodes':Genre.objects.all()}, 
                          context_instance=RequestContext(request))

And add a URL for it in urls.py:

(r'^genres/$', 'myapp.views.show_genres'),

----------------
django-mptt предоставляет несколько тегов для простоты работы 

{% load mptt_tags %}  --подгрудаем теги 
<ul>
    {% recursetree nodes %}
        <li>
            {{ node.name }}
            {% if not node.is_leaf_node %} --если это не листовой узел (видимо, листовой - это уже без потомков)
                <ul class="children">
                    {{ children }}
                </ul>
            {% endif %}
        </li>
    {% endrecursetree %}
</ul>

---------------------------------------------------------------------------
 шаблонный тег recursetree  рекрусивно отображает этот фрагрент шаблона для всех узлов

Далее можентепосмотреть документацию по 

как кастомизировать админку
 больше шаблонных тегов

функции перестройки дерева(tree rebuild functions) 
и т. д. 
----------------------------------------------------------------------------------------
дальше смотрим документацию  http://django-mptt.github.io/django-mptt/

Topic docs:

    Models and Managers
    Admin classes
    Working with trees in Django forms
    Working with trees in templates
    Utilities for working with trees
    Upgrade notes
    Technical details
-----------------------------------------------------------------------------------------
Models and Managers  http://django-mptt.github.io/django-mptt/models.html

        
        Настройка модели Django для MPTT (Setting up a Django model for MPTT) 

тут идет часть, где повторяется про модель (описанее как выше)

далее:
если у вас модель наследуется от нескольких  ролителей, то MPTTModel должна  идти первой:
class Genre(MPTTModel,Foo,Bar):
    name = models.CharField(max_length=50, unique=True)

так происходит потому ,что MPTTModel наследуется от models.Model,
(и в моделях, соответственно, models.Model должен быть первым родиелем)
-------------------------------------
           Опции моделей (Model Options)

когда  мы переделываем модель под mptt, тордобавляется несколько(4 шт) новых полей(см.выше и ниже)

но может возникнуть ситуация, когда в изначальной модели уже есть поле с таким именем,
Может возникнуть конфликт
Чтобы его избежать, создайте MPTTMeta класс внутри класса модели:

class Genre(MPTTModel):
    name = models.CharField(max_length=50, unique=True)
    parent = TreeForeignKey('self', null=True, blank=True, related_name='children')

    class MPTTMeta:
        level_attr = 'mptt_level' # вот тут мы меняем имя поля, 
                                  # которое генерируется автоматически, чтобы избежать кофликта 

        order_insertion_by=['name']

 Доступны такие опции(атрибуты класса) для MPTTMeta:

 parent_attr

    The name of a field which relates the model back to itself 
    such that each instance can be a child of another instance. Defaults to 'parent'. 

Имя поля, которое является обратной связью на самого себя 
(каждый экземпляр может быть дочерним отдругого экземпляра) По умолчанию 'parent'

(Видимо имеется ввиду, что,например, есть экземпляр модели, который не является  ни для одного
другого экземпляра родительским.  Такому экземпляру ,чтобы достучаться до родителя, нужно использовать 
'parent'  -- по идее в нашем примере это поле  явно есть, но если  это поле называется 
по-дугому ( не 'parent'), это нужно явно задать в MPTTMeta)

Пользователи несут ответственность
за установку этого поля на классе модели, которая может быть выполнена следующим образом:
parent = TreeForeignKey('self', null=True, blank=True, related_name='children')

----------------------------------------------------

Для следующих четырех аргументов, 
если поля с заданными именами не существует, они будут добавлены к модели динамически:
(то есть у модели появятся  дополнительные поля)

(На сколько я понимаю, по умалчанию добавляются 4 доп поля --  если мы их делаем вручную , то это нужно указывать в
 MPTTMeta,  как в случае с 'parent', или, например, нужно задать им другое имя)

left_attr
Имя поля ,которое содержит  индикатор левого узла (иерархического дерева).
Это поле должно быть PositiveIntegerField. По умолчанию 'lft'.
('lft' - это как до него можно достучаться, назание атрибута модели)

--------------------
right_attr
Тоже самое что и left_attr, только это индикатор правого узла 
По умолчанию 'rght'.

--------------------
tree_id_attr
Имя поля, которое содержит  id-номер иерархического дерева  для каждого узла.
Должен быть PositiveIntegerField. По умолчанию 'tree_id'.

Экземпляры модели , у которых нет родителей, счиаются
“root”(корневыми) узлами (“root” nodes ) в иерархическом дереве.
Таким узлам будет выделено новое id (tree id).
То есть будет считаться что созданоновое деревосо своим id.
Всем потомкам корневых узлов будет дано то же самое tree id как и корневому узлу их дерева(перевод)

То есть это tree id показывает, к какому дереву принадлежит узел.( добавлено от меня )

--------------------
level_attr
Имя поля, которое содержит (нулевой--zero-based) уровень,
на котором экземпляр находится на дереве.  
Должно быть PositiveIntegerField.
По умолчанию 'level'.

Например, корневые узлы будут иметь  уровень(level) 0,
и их непосредственные дети имеют имеют уровень(level) 1.
--------------------
order_insertion_by
 Список имен полей, которые должны определить порядок, 
 когда новые промежуточные узлы вставить или существующих узлов в настоящее время предок,
 с наиболее значительным заказа имени поля в первую очередь. По умолчанию [].
Предполагается, что любое поле о никогда не будет NULL в базе данных.(то есть всегда в ячейке что то есть)

Обратите внимание, что для этого потребуется дополнительный запрос к базе данных,
чтобы определить, где узлы должны быть расположены, когда они были сохранены.
Эта опция пригодится, если вы поддерживаете в основном статические структуры,
такие как деревья категорий, которые всегда должны быть в алфавитном порядке

----------------------------------------------------------------------------------------------------
 
            Регистрация существующих моделей (Registration of existing models)

Предпочтительный способ сделать регистрацию модели  в Django-mptt 0.4(тут видимо ошибка)
 является использование подкласса MPTTModel.

Однако, этот способ не всегда работает.

Предположим, вы хотите изменить джанго модель Group --сделать ее иерархичной.
 Вы не можете использовать MPTTModel без модификации  исходного кода модели Group.
но вместо этого вы можете сделать так:

import mptt
from mptt.fields import TreeForeignKey
from django.contrib.auth.models import Group

# add a parent foreign key
TreeForeignKey(Group, blank=True, null=True).contribute_to_class(Group, 'parent')

mptt.register(Group, order_insertion_by=['name'])
----
то есть мы добавляем  внешним образом 
атрибут parent (который  обязательно необходим в каждой
иераархической модели модели для работы mptt)
----

mptt.register() был удален в 0.4.0  но восстановлен in 0.4.2 -- видимо, посчитали что нужен.
----------------------------------------------------------------------------------------------------
            
                Методы экземпляров модели MPTTModel (MPTTModel instance methods)

Подклассы  MPTTModel имеют нижеследующие  методы.

----------------------------------------------------------------------------------------------------












